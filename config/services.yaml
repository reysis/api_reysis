# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    uploads_dir_name: 'uploads'
    uploads_base_url: '%env(SITE_BASE_URL)%/%uploads_dir_name%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

        bind:
            $markdownLogger: '@monolog.logger.markdown'
            $publicUploadFilesystem: '@oneup_flysystem.public_uploads_filesystem_filesystem'
            $privateUploadFilesystem: '@oneup_flysystem.private_uploads_filesystem_filesystem'
            $uploadedAssetsBaseUrl: '%uploads_base_url%'
    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    Symfony\Component\Asset\Context\RequestStackContext: '@assets.context'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\Swagger\SwaggerDecorator:
        decorates: 'api_platform.swagger.normalizer.documentation'
        arguments: ['@App\Swagger\SwaggerDecorator.inner']
        autoconfigure: false

    App\Serializer\AdminGroupsContextBuilder:
        decorates: 'api_platform.serializer.context_builder'
        arguments: [ '@App\Serializer\AdminGroupsContextBuilder.inner' ]
    
    App\ApiPlatform\AutoGroupResourceMetadataFactory:
        decorates: 'api_platform.metadata.resource.metadata_factory'
        arguments: ['@App\ApiPlatform\AutoGroupResourceMetadataFactory.inner']
        decoration_priority: -20

    App\DataPersister\UserDataPersister:
        bind:
            $decoratedDataPersister: '@api_platform.doctrine.orm.data_persister'
    App\DataPersister\TurnoDataPersister:
        bind:
            $decoratedDataPersister: '@api_platform.doctrine.orm.data_persister'

    App\DataProvider\UserDataProvider:
        bind:
            $collectionDataProvider: '@api_platform.doctrine.orm.default.collection_data_provider'
            $itemDataProvider: '@api_platform.doctrine.orm.default.item_data_provider'
    App\DataProvider\ServiceDataProvider:
        bind:
            $collectionDataProvider: '@api_platform.doctrine.orm.default.collection_data_provider'
            $itemDataProvider: '@api_platform.doctrine.orm.default.item_data_provider'

    gesdinet.jwtrefreshtoken.refresh_token_manager:
        class: App\Doctrine\RefreshTokenManager
        public: true
        arguments: [ '@doctrine.orm.default_entity_manager', 'Gesdinet\JWTRefreshTokenBundle\Entity\RefreshToken' ]
    acme_api.event.authentication_success_listener:
        class: App\EventListener\AuthenticationSuccessListener
        arguments: [ '@request_stack' ]
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_success, method: onAuthenticationSuccessResponse }